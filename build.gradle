buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = "https://maven.parchmentmc.org" }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = 'me.orbitalhare.terrafirmamisc'
version = '0.0.1-1.18.2'
archivesBaseName = 'terrafirmamisc'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)


minecraft {

    mappings channel: 'parchment', version: '2022.11.06-1.18.2'
    //mappings channel: 'official', version: '1.18.2'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        all {
            args("-mixin.config=terrafirmamisc.mixins.json")

            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")

            jvmArgs("-ea", "-Xmx4G", "-Xms4G")

            mods {
                terrafirmamisc {
                    source sourceSets.main
                }
            }
        }
            client {
                workingDirectory project.file("run")
            }

            server {
                workingDirectory project.file("run/server")
                arg("--nogui")
            }
        }
    }


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir {
        dir "libs"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation(fg.deobf('org.spongepowered:mixingradle:0.7.+'))
    //implementation(fg.deobf("tfc:TerraFirmaCraft-Forge-${minecraft_version}:${tfc_version}"))
    implementation fg.deobf("curse.maven:tfc-302973:${tfc_identifier}")

    //compileOnly(fg.deobf("curse.maven:firmalife-453394:${firmalife_identifier}"))
    //runtimeOnly(fg.deobf("curse.maven:firmalife-453394:${firmalife_identifier}"))

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
    }

    // Patchouli
    implementation(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))

    // Jade
    compileOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    runtimeOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    compileOnly(fg.deobf("curse.maven:top-245211:${top_version}"))
    //runtimeOnly(fg.deobf("curse.maven:top-245211:${top_version}"))

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}"))
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "terrafirmamisc",
                "Specification-Vendor"    : "OrbitalHare",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "OrbitalHare",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

idea {
    module {
        excludeDirs.add(file("run"))
    }
}

mixin {
    add(sourceSets.main, "terrafirmamisc.refmap.json")
}



jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
